<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Golang环境安装</title>
      <link href="/2019/11/22/go-install/"/>
      <url>/2019/11/22/go-install/</url>
      
        <content type="html"><![CDATA[<h2 id="Golang语言介绍"><a href="#Golang语言介绍" class="headerlink" title="Golang语言介绍"></a>Golang语言介绍</h2><p>Golang语言是Google公司开发的一种类C语言，是一门编译型的静态语言，而且Golang语言天生带有高并发功能的语言级别支持。<br>Golang语言类C并不是仅仅在语法上和C语言类似，而且好包含了C的指针特性（优点），可能你有C语言基础的，一看到指针就感觉到可怕，但是Golang的指针只具有C指针的优点，花样也没有C语言多，所以没那么可怕。<br>忘了告诉你了，Golang的语言设计者其中一位就是C语言和Unix系统开发者<code>Ken Thompson</code>大佬。Golang被称为当代的C语言，当然要有现在其他语言所拥有的语言特性：高并发（协程），垃圾回收GC，类型推断和闭包等。<br>当前比较流行的Docker容器技术就是使用Go语言开发的，区块链技术实现也可以使用Go语言。Go有这么多优点，还不学吗？</p><h2 id="Golang语言环境安装"><a href="#Golang语言环境安装" class="headerlink" title="Golang语言环境安装"></a>Golang语言环境安装</h2><h3 id="1-Golang环境下载"><a href="#1-Golang环境下载" class="headerlink" title="1. Golang环境下载"></a>1. Golang环境下载</h3><p>第一步肯定是下载Golang的安装包啦！但是，由于某些原因，我们是无法访问Google服务器，但是国内有一些大佬已经在国内做了代理，可以通过国内代理下载：</p><ul><li><p>国内Golang下载：<code>https://studygolang.com/dl</code></p></li><li><p>官方Golang下载：<code>https://golang.org/dl/</code></p><p>  点击网址，我们可以看到一些下载选项：<br>  <img src="download1.png" alt="国内下载"></p></li></ul><p>我们根据自己电脑的操作系统选择不同的下载包下载即可。不过可以看到windows和MacOS 都支持两种下载方式，一种是<code>zip</code>包方式下载，另一种就是推荐下载中列出的<code>msi</code>/<code>pkg</code>。二者差别是：<code>zip</code>下载后需要解压然后自己设置一些变量，<code>msi</code>和<code>pkg</code>都是可执行文件，直接点击就可以。我喜欢使用<code>zip</code>方式，因为我认为这种更新更方便，毕竟什么都是自己在配置。</p><blockquote><p>Golang自从1.5版本之后就是自举实现，如果你想自己编译，则需要下载<code>推荐下载</code>中的源码，并且你自己的电脑上也要有Go环境。</p></blockquote><h3 id="2-Golang安装"><a href="#2-Golang安装" class="headerlink" title="2. Golang安装"></a>2. Golang安装</h3><p>点击下载完之后（我下载的是zip文件），然后解压，我把解压后的文件夹go，移动到<code>D盘根目录上</code>。如果你是使用的<code>msi</code>方式，直接双击运行即可，需要注意它的安装位置（在点击next的时候你也可以改变）。</p><h3 id="3-设置PATH变量"><a href="#3-设置PATH变量" class="headerlink" title="3. 设置PATH变量"></a>3. 设置<code>PATH</code>变量</h3><p>   <code>PATH</code>是一个系统原本就带有变量，它的作用是当你执行一个命令或程序的时候，系统可以检查这个变量中的路径，查找那个程序，这样就不用在程序的安装目录里才能执行程序，这个变量每一个系统都有，Windows和Linux的区别是Windows使用英文的<code>;</code>作为多个路径分割符，而Linux使用英文<code>:</code>作为系统分割符。我们设置这个变量就是把我们的Go程序安装目录下的<code>bin\go.exe</code>和<code>bin\fmt.exe</code>程序可以让系统找到，所以，我们要给<code>APTH</code>环境变量添加一个<code>;GO_INSTALL_PATH\bin</code>。其中<code>GO_INSTALL_PATH</code>就是Go安装的路径。</p><blockquote><p>注意：windows下路径分割符是<code>\</code>,Linux下是<code>/</code></p></blockquote><h3 id="4-设置GOROOT，GOPATH，GOBIN环境变量"><a href="#4-设置GOROOT，GOPATH，GOBIN环境变量" class="headerlink" title="4. 设置GOROOT，GOPATH，GOBIN环境变量"></a>4. 设置<code>GOROOT</code>，<code>GOPATH</code>，<code>GOBIN</code>环境变量</h3><ul><li><code>GOROOT</code>：这个环境变量类似于Java的<code>JAVA_HOME</code>，作用就是告诉系统或者其他需要知道Go的安装位置的一个系统变量</li><li><code>GOPATH</code>：设置变量就是指定你的工作区（文件夹），简单一句话，你要在那个文件夹下写项目。因为开发程序需要依赖一些其他的包（库/别人写的代码），所以你要先下载下来，下载到那个地方，就是这个变量所指的文件夹下。这个文件夹下也有一些结构：<ul><li>bin文件夹：这个文件夹就是存放go编译后可以执行的一些程序</li><li>pkg文件夹：这个文件夹存放的是下载下来的官方的代码或者别人的代码<code>编译后的库</code>。什么叫做库，类似与压缩包，不过这个压缩包是以<code>.a</code>结尾的。</li><li>src文件夹：这个文件夹存放的是下载下来的官方的代码或者别人的代码，我们自己写的代码也是在这个里面。如果不想在一个文件夹里面写程序，可以设置多个<code>GOPATH</code>，或者使用Go1.11版本之后开始支持的模块，这个以后再说吧。</li></ul></li><li><code>GOBIN</code>：这个变量可以不用设置，如果设置好<code>GOPATH</code>的话。这个变量是设置Go下载下来的程序<code>编译成可执行程序后的位置</code>。这个和<code>GOPATH/pkg</code>的区别就是: <code>GOBIN</code>是go可以下载别人的代码，然后编译成可以执行的程序，然后执行，这个等一会就看到，而<code>GOPATH/pkg</code>则是我们写的代码需要引用别人的代码（在<code>GOPATH/src</code>中），我们总不能把别人的代码编译成程序然后在自己的代码中调用吧，所以需要把别人的代码编程一种库的形式使用，类似与Java中的<code>jar</code>文件（其实jar文件就是一个压缩文件）。</li></ul><p>说了这么多，也要开始设置动手设置一下吧：</p><p>右击<code>此电脑</code> -&gt; 点击<code>属性</code> -&gt; 点击左侧的<code>系统高级设置</code> -&gt; 点击弹出框中的<code>环境变量</code>,然后看图吧：<br><img src="1.png" alt="步骤一"></p><p><img src="2.png" alt="步骤二"></p><p><img src="3.png" alt="步骤三"> </p><blockquote><p>设置上面的三个变量。</p></blockquote><p><img src="4.png" alt="给go添加到PATH上"></p><h3 id="5-检查一下吧！看看可不可以得到Go的一些信息："><a href="#5-检查一下吧！看看可不可以得到Go的一些信息：" class="headerlink" title="5. 检查一下吧！看看可不可以得到Go的一些信息："></a>5. 检查一下吧！看看可不可以得到Go的一些信息：</h3><p>   打开一个操作系统的终端，然后输入<code>go version</code>和<code>go env</code>看看你都可以看到什么。</p><h2 id="选择一个开发工具"><a href="#选择一个开发工具" class="headerlink" title="选择一个开发工具"></a>选择一个开发工具</h2><p>推荐工具</p><ul><li>LiteIDE（没用过）</li><li>GoLand（收费，装了，不经常使用）</li><li>VsCode（挺好的，我习惯使用的）</li></ul><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>如果你使用vscode开发的话，你需要安装Go插件，当你使用vscode打开第一个go文件时，会提醒你是否安装一些go的工具，如果你点击确定，含有可能下了半天还没有下载下来，这是因为vscode支持的go的一些工具是google服务器上的，所以肯有可能下载失败。百度你也可以搜，有很多教程，但是最好的解决方式就是设置一个代理。可以是你所理解的代理，也可以是其他大佬给我们提供的代理。<br>我这里推荐使用：<a href="https://goproxy.io/" target="_blank" rel="noopener">https://goproxy.io/</a><br>访问这个网址，里面有教程。或者我直接告诉你：就是再设置一个环境变量<code>GOPROXY</code>,值就是:<code>https://goproxy.io</code>，设置方法你应该会了。设置完成后，你可以再次运行<code>go env</code>命令，找找输出列表中<code>GOPROXY</code>的值是不是设置的那个，然后你再试试是否可以下载。</p><h2 id="Hello-world-for-go"><a href="#Hello-world-for-go" class="headerlink" title="Hello world for go"></a>Hello world for go</h2><p>在<code>GOPATH/src</code>新建一个文件夹，然后在新建一个名为hello.go的文件<br>内容：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello world for go!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后打开终端，执行<code>go run hello.go</code>试试看！<br><img src="run.png" alt="运行结果"></p><h2 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h2><p>Go和开源有着很重要的关系，以后就会知道！</p><p>在GitHub上有两本Go开源书籍：</p><ul><li><a href="https://github.com/golang101/golang101" target="_blank" rel="noopener">https://github.com/golang101/golang101</a></li><li><a href="https://github.com/chai2010/advanced-go-programming-book" target="_blank" rel="noopener">https://github.com/chai2010/advanced-go-programming-book</a><blockquote><p>这两本书讲的比较深</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终于要开始写博客</title>
      <link href="/2019/11/22/2019-start/"/>
      <url>/2019/11/22/2019-start/</url>
      
        <content type="html"><![CDATA[<p>为什么说我是“终于”要开始写博客了呢？因为对于博客，我努力尝试过很多次最终的结果：现在开始写博客。这其中每次都是因为不同的想法。</p><p>第一次想写博客是因为我从大一学会Java Web后自己想做一个博客系统然后在上面写，可惜自己前端知识特别差，那当时看到CSS就头痛，更没用过相关的框架，努力了一些Bootstrap框架后就放弃了，然后使用了有道云笔记。<br>第二次想写博客是因为在一个群里，群主要举办一个活动，然后想参加互动必须要准备一个博客，我就草草的准备了一个。之后想再上面写点东西，发现自己不知道写什么，也不知道自己有什么可以写的。不久之后也就忘了。<br>之后也有很多次想过，想的时候感觉自己可以做好，但是总以失败告终；比如想在掘金上写一点东西，自己开始写的时候，总是发现自己以为懂的东西，给别人将却讲不出来……</p><p>为什么今天我又开始，这次会不会又再次放弃呢？说实话，我也不知道，只是最近读了一些书，回想了过去大学三年，想了想这三年我学过的知识，用过的技术，才发现我什么都没有留下了，能做的不过是接别人的话，顺势装个x。所以，我现在开始想写博客原因有三个，其一：我要现在开始准备为我的毕业做“总复习”，把以后找工作的知识点，以前用过的技术，总体上复习一下，对使用的技术及其原理都要做一些了解，所以我要找个地方记录，没有选择使用笔记的方式而选择客是因为，我想把我所理解的知识分享出去，如果错误也希望有人可以反馈给我，不知等我用的到时候才发现；其二：我大一暑假，我当时注意到Go语言，并且开始找了一些视频学习，之后就是找了一些书看看，总体掌握的很差。也是最近几天，登录管看到biezhi大佬的<code>代码真香</code>频道，发现他的Go语言视频已经有一年没有更新过了，我就有了一个打算：边学习边录制视频交给别人。叫别人一个简单的知识点容易，但是要教一套语言使别人可以入门，要有很多课程设计，知识规划和总结，所以就想写博客，一作为自己对Go知识点的梳理，二作为Go视频中知识点的补充。这两个原因算是我开始写博客的主要原因。如果要多说一个原因，那就是，如你所见，我的文笔并不好，我也想借机练习一下。</p><p>2019也快结束了，我也快要开始找工作了，只希望接下来的几个月可以好好学习知识，充实自己，做好计划的每一件事。2019亦结束，亦开始！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
